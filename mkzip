#!/usr/bin/env ruby
require 'date'

def say(s)
   STDERR.puts(s)
end

def warn(s)
   STDERR.puts "warning: #{s}"
end

def die(s)
   STDERR.puts "fatal: #{s}"
   exit(1)
end

name = 'ctable'

# is cvs up to date?
files = []
open("|cvs -Q status").each do |line|
   if line =~ /File:\s+([.\w]+)\s+Status:\s+([\w-]+)/
      f,s = $1,$2
      f or next
      next if f == 'mkzip'
      files.push(f) unless s == "Up-to-date"
   end
end
if files.size > 0
  puts "These files differ from their CVS-versions:",
       files.join("\n"),
       "Go on (y/n)?"
  gets =~ /^y/ or die "install cancelled by user request"
end 

# create sty and pdf if need so:
system("export NOINSTALL=true; ./inst") or 
   die "Problems creating sty and pdf files"

files = ['README'] # files to zip
for i in %w{dtx ins sty pdf} do
   f = "#{name}.#{i}"
   FileTest.exist?(f) or raise "file #{f} does not exist"
   files.push(f)
end

Dir["doc/{[0-9][0-9][a-z],doit,lion.png,penguin.jpg}"].each do |f|
   files.push(f)
end
files.push('inst')

# check for equal dates and warn if date older than a day:
# $Id$
#        [2003/04/06 v1.4 LaTeX package ctable]

@cvsdate = @packdate = @version = 'empty'
open(name+'.dtx').each do |line|
  case line
    when /Id: .*(\d\d\d\d-\d\d-\d\d)/
      @cvsdate = $1
   when /(\d\d\d\d\/\d\d\/\d\d) v(\d+\.\d+[a-z]*) /
      @packdate,@version = $1,$2
   end
end
say "     version: #{@version}\npackage date: #{@packdate}\n    cvs-date: #{@cvsdate}"

# is README updated?
found = false
open('README').each do |line|
  if line =~ /v#{@version} relative to/
    found = true
    break
  end
end
die "README not updated" unless found

pd=Date.parse(@packdate)
cd=Date.parse(@cvsdate)
if (cd-pd).abs > 1
   warn "package and cvs dates differ by more than 1 day;"
   say  "Go on (y/n)?"
   gets =~ /^y/ or die "install cancelled by user request"
end

zip = "#{name}-#{@version}.zip"

system("zip -Dqr #{zip} #{files.join(' ')}")

say "     created: #{zip}"
