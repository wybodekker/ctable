#!/bin/bash
Version=1.01
 Myname="${0##/}"
    job=ctable
    ext=sty

:<<'DOC'
= inst - install ctable

= Synopsis
inst [options]	

Without any options, inst installs ctable in the first writable
TEXMFMAIN, TEXMFLOCAL or TEXMFHOME tree.

Options:
-h|--help	print short help and exit
-H|--Help	print full documentation and exit
-V|--version	print version and exit

= Description
inst must be run in its own directory (|./inst|) and then does the following:
- generates the documentation,
- installs ctable in one of your TeX trees: TEXMFMAIN, TEXMFLOCAL or TEXMFHOME. 
  The first one writable by you will chosen.
- creates a zip file named |ctable-x.yy.zip| for upload to CTAN
- cleans up

= Author
[Wybo Dekker](wybo@dekkerdocumenten.nl)

= Copyright
Released under the [GNU General Public License](www.gnu.org/copyleft/gpl.html)
DOC

REd='\e[38;5;9m' Nor='\e[0m'
    die() { local i; for i; do echo -e "$Myname: $REd$i$Nor"; done 1>&2; exit 1; }
helpsrt() { sed -n '/^= Synopsis/,/^= /p' "$0"|sed '1d;$d'; exit; }
helpall() { sed -n "/^:<<'DOC'$/,/^DOC/p" "$0"|sed '1d;$d'|
            less -P"$Myname-${Version/./Â·} (press h for help, q to quit)";exit; }

setdir() { # create installation directory
   for i in MAIN LOCAL HOME; do
      tree=$(kpsewhich --expand-var \$TEXMF$i)
      test -w "$tree" && break
      tree=
   done
   [[ -n $tree ]] || die "Could not find a writable TeX tree"
   insttex=${tree}/tex/latex/$job
   instsrc=$tree/source/latex/$job
   instdoc=$tree/doc/latex/$job
   mkdir -p $insttex || die could not create $insttex
   mkdir -p $instsrc || die could not create $instsrc
   mkdir -p $instdoc || die could not create $instdoc
}

:<<'DOC' #---------------------------------------------------------------------
= excheck
synopsis:	 excheck executable1 [executable2...]
description:	check if all needed execs are there and getopt is GNU
DOC
#-------------------------------------------------------------------------------
excheck() {
   local ok=true i
   ((BASH_VERSINFO>=4)) || die "Need bash version >= 4"
   for i; do 
      command -v "$i" > /dev/null && continue
      Warn "Missing executable: $i"
      ok=false
   done
   $ok || die
   getopt -T 
   [[ $? -ne 4 ]] && die "Your getopt is not GNU"
}

makeall() {
   local date d D v
   tex $job.ins >/dev/null
   # Now we have README.md; lets check the version and date were
   # correctly set everywhere in the dtx-file:
   version=$(sed  -n 's/|version | \(.*\)/\1/p' README.md)
      date=$(sed  -n 's/|   date | \(.*\)/\1/p' README.md)
   read -r d v < <(
      sed -ne 's/^ *\[\([0-9/]\+\) v\([0-9.]\+[a-z]*\).*/\1 \2/p' "$job.dtx"
   ) || die "package date and version not found in correct format"
   D=$(sed -n 's/^% \\changes{v'"$version"'}{\(.*\)}{.*/\1/p' "$job.dtx")
   [[ -n $D ]] || die "found no changes entry for version $version"
   [[ $version == "$v" ]] ||
      die "README version ($version) not equal to package version ($v)"
   [[ $date == "$d" ]] ||
      die "README date ($date) not equal to package date ($d)"
   [[ $date == "$D" ]] ||
      die "README date ($date) not equal to changes date ($D)"
   

   # install any .ttf files
   mkdir -p ~/.fonts
   find doc -name '*.ttf' -exec cp {} ~/.fonts \;
   fc-cache ~/.fonts

   # compile all examples
   cd doc || die
   ln -sf ../"$job".sty . || exit 1 # use the version to be installed
   for i in [0-9][0-9]?; do 
      if [[ ! -f $i.pdf ]] || [[ ! -f s$i.pdf ]]; then
         ./doit || exit 1
         break
      fi
   done
   cd .. || die
  
   lualatex "$job".dtx &>/dev/null || die "lualatex failed on  $job.dtx"
   if [ -f "$job".glo ]; then makeindex -q -s gglo.ist -o "$job".gls "$job".glo; fi
   if [ -f "$job".idx ]; then makeindex -q -s gind.ist -o "$job".ind "$job".idx; fi
   lualatex "$job".dtx &> /dev/null
   lualatex "$job".dtx &> /dev/null

}

installall() {
   # install and cleanup
   echo installing in "$tree"
   # remove old versions from the tree:
   rm -rf "${insttex:?}/*" "${instsrc:?}/*" "${instdoc:?}/*"
   cp -f "$job.$ext" "$insttex"
   cp -a "$job".{ins,dtx} "$instsrc"
   cp -a "$job.pdf" "$instdoc"
   mktexlsr "$tree" 2>/dev/null
   rm -f "$job".{"$ext",aux,glo,gls,idx,ilg,ind,log,out,toc,pdf} doc/*.{tex,pdf,$ext}
   tmp=$(mktemp -dt 'XXXXXXXXXX')
   trap 'rm -rf $tmp' 0 1 2 15
   mkdir "$tmp/$job"
   cp -a README.md "$job".{dtx,ins} doc inst "$tmp/$job"
   cd "$tmp" || die
   zip -rq "$job-$version.zip" "$job"
   cd ~- || die
   mv "$tmp/$job-$version.zip" .
}

:<<'DOC' #----------------------------------------------------------------------
= handle_options
synopsis:	 handle_options "$@"
description:	handle the options.
globals used:	 Myname Version
globals  set:	 args
DOC
#-------------------------------------------------------------------------------
handle_options() {
   local options

   options=$(getopt \
      -n "$Myname" \
      -o hHV \
      -l help,Help,version \
      -- "$@"
   ) || exit 1
   eval set -- "$options"
   while true; do
      case $1 in
      (-h|--help)    # print short help and exit
	    helpsrt
	    ;;
      (-H|--Help)    # print full documentation and exit
	    helpall
	    ;;
      (-V|--version) # print version and exit
	    echo $Version
	    exit
	    ;;
      (--)  shift
	    break
	    ;;
      (*)   break
	    ;;
      esac
   done
   args=( "$@" )
}

excheck zip getopt lualatex
handle_options "$@"
set -- "${args[@]}"
[[ -z $1 ]] || die No arguments expected
setdir
makeall
installall
